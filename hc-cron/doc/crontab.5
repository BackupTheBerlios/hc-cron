.\"/* Copyright 1988,1990,1993,1994 by Paul Vixie
.\" * All rights reserved
.\" *
.\" * Distribute freely, except: don't remove my name from the source or
.\" * documentation (don't take credit for my work), mark your changes (don't
.\" * get me blamed for your possible bugs), don't alter or remove this
.\" * notice.  May be sold if buildable source is provided to buyer.  No
.\" * warrantee of any kind, express or implied, is included with this
.\" * software; use at your own risk, responsibility for damages (if any) to
.\" * anyone resulting from the use of this software rests entirely with the
.\" * user.
.\" *
.\" * This manual page was extensively modified by Bryan Henderson 2000.04.29.
.TH CRONTAB 5 "29 April 2000"
.UC 4
.SH NAME
crontab \- tables for driving cron
.SH DESCRIPTION
A
.B crontab
file contains instructions to the
.BR crond (8)
daemon of the general form: ``run these commands at these times.''
Each user has his own crontab, and commands in any given crontab will
be executed in the context of the user who owns the crontab.  

There is also a system crontab (usually /etc/crontab) for commands which 
belong to the system rather than to a particular user.

.SH GENERAL FORMAT

Blank lines and leading spaces and tabs are ignored.  Lines whose first
non-space character is a pound-sign (#) are comments, and are ignored.
Note that comments are not allowed on the same line as cron commands, since
they will be taken to be part of the command.  Similarly, comments are not
allowed on the same line as environment settings.
 
An active line in a crontab will be either an environment setting or a cron
command.  
 
.SH COMMENTS

Two special forms of comments affect the operation of 
.B crontab
(but, as comments, have no effect on 
.BR crond ):
 
A line that begins in Column 1 with
.B #CRONTAB
is a comment generated automatically by 
.BR crontab .
.B crontab
treats these a little differently than a comment explicitly provided by the
user.  An example is the lines at the top telling someone viewing the actual
crontab file that it was created by 
.B crontab
and should not be manually edited.
 
If the first line in the crontab begins in Column 1 with
.BR #NODONTEDIT ,
.B crontab
does not add its "Don't edit this file" comment when you have 
.B crontab
install the crontab.  If system administration policy calls for having a 
master copy somewhere and using 
.B crontab 
to copy it to the active location, this comment is good.  But if your
policy allows for having the installed copy of a crontab be the master
copy (which you might even edit with
.BR "crontab -e" ),
then the comment is entirely inappropriate and you should put
.B #NODONTEDIT
at the top of the crontab.
 
.SH ENVIRONMENT SETTINGS

An environment setting sets an environment variable supplied to every
cron command run as a result of this crontab.  Some of these settings
also affect 
.BR crond 's 
own operation, as described below.
 
An environment setting is of the form
.br
.IB  "   name " = " value"
.br
where the spaces around the equal-sign (=) are optional, and any subsequent
non-leading spaces in
.I value
will be part of the value assigned to
.IR name .
The
.I value
string may be placed in quotes (single or double, but matching) to preserve
leading or trailing blanks.
 
In addition to the environment variables set with environment settings
in the crontab, cron may pass all of the environment variables in its own
environment to all the cron commands it executes.  Whether it does this
or not depends on the options with which the cron daemon is started.  
See
.BR crond (8).

Environment settings in the crontab always override settings from 
.BR crond 's
environment.
 
Several environment variables are set up automatically by the
.BR crond (8)
daemon.
.B SHELL 
is set to /bin/sh, and 
.B LOGNAME 
and 
.B HOME 
are set from the /etc/passwd 
line of the crontab's owner.
Settings of 
.B HOME 
and 
.B SHELL 
in the crontab override these automatic settings, but
.B LOGNAME
is never affected by either 
.BR crond 's
environment or crontab settings.
 
(Another note: the 
.B LOGNAME 
variable is sometimes called 
.B USER 
on BSD systems.  On these systems
.B crond 
sets
.B USER 
also.)
 
.BR crond (8)
itself uses the value of 
.B MAILTO 
and 
.B CRON_VERBOSE 
environment variables that it passes to a cron command (which are typically
set inside the crontab, but could conceivably be passed from
.BR crond 's
environment).

.B crond
looks at 
.B MAILTO 
if it has any reason to send mail as a result of running a cron command in
this crontab.  If
.B MAILTO 
is defined (and not a null string), 
.B crond 
sends mail to the user so named.  If
.B MAILTO 
is defined as a null string, 
.B crond
sends no mail.  If
.B MAILTO
is not defined,
.B crond
sends mail to the owner of the crontab.  This option is useful if
.B crond
is configured to use 
.B mail 
instead of 
.B sendmail 
as its mailer --
.B mail 
doesn't do aliasing, and UUCP usually doesn't read its mail.
 
.B crond
uses 
.B CRON_VERBOSE
to decide how much information to put in the mail message that it sends
containing the output of a cron command.  If
.B CRON_VERBOSE
is defined at all, 
.B crond
includes X-Cron-Env: headers in the mail message showing all of the 
environment variables that were passed to the cron command.  Otherwise,
.B crond
does not include environment information in the mail message.  Because
cron commands typically produce output only when something has gone wrong,
the environment variable information can be a very handy debugging 
feature.  On the other hand, for normal output of a cron command, it
might really get in the way.
 
Regardless of 
.BR CRON_VERBOSE ,
.B crond
does not send any mail if the command generates no output.
 
.SH CRON COMMANDS

The format of a cron command is very much the V7 standard, with a number of
upward-compatible extensions. There are four fields to each line: a time
descriptor, a username (only in the system crontab), an optional flag field,
and finally the command itself.
 
The time descriptor is itself normally composed of five time and date fields.
The command is executed by
.BR crond (8)
for the user who's username has been specified when the minute, hour, and 
month of year fields match the current time,
.I and
when at least one of the two day fields (day of month, or day of week)
match the current time (see ``Note'' below).
 
.BR crond (8)
examines cron entries once every minute.
The time and date fields are:
.IP
.ta 1.5i
field	allowed values
.br
-----	--------------
.br
minute	0-59
.br
hour	0-23
.br
day of month	1-31
.br
month	1-12 (or names, see below)
.br
day of week	0-7 (0 or 7 is Sun, or use names)
.br
 
A field may be an asterisk (*), which always stands for ``first\-last''.
 
Ranges of numbers are allowed.  Ranges are two numbers separated
with a hyphen.  The specified range is inclusive.  For example,
8-11 for an ``hours'' entry specifies execution at hours 8, 9, 10
and 11.
 
Lists are allowed.  A list is a set of numbers (or ranges)
separated by commas.  Examples: ``1,2,5,9'', ``0-4,8-12''.
 
Step values can be used in conjunction with ranges.  Following
a range with ``/<number>'' specifies skips of the number's value
through the range.  For example, ``0-23/2'' can be used in the hours
field to specify command execution every other hour (the alternative
in the V7 standard is ``0,2,4,6,8,10,12,14,16,18,20,22'').  Steps are
also permitted after an asterisk, so if you want to say ``every two
hours'', just use ``*/2''.
 
Names can also be used for the ``month'' and ``day of week''
fields.  Use the first three letters of the particular
day or month (case doesn't matter).  Ranges or
lists of names are not allowed.
 
The time descriptor can also be one of the following special values instead:
.IP
.br
@reboot
.br
@hourly
.br
@daily
.br
@weekly
.br
@monthly
 
The command will then be run only at startup (@reboot) or roughly in the 
specified intervals.
 
The optional flag field determines whether the command should be run if it 
occured between the time
.I cron
was last shut down and startup. This permits cron to run commands regularly
even on systems that don't run all of the time (``home computers''). The
flag field can have four values:
.TP
.B empty
standard cron behaviour, start the command only if cron is running at the
specified time.
.TP
.B *
catch up all occurences of this job.
.I Cron
runs this command as many times as it would have done if it had not been
shut down.
.TP
.B !
catch up this job, but run only once, no matter how many times it occured
between shutdown and startup.
.TP
.B \\\\
as empty. This allows the first character of the command to be ``*'' or ``!''.
 
The command field (the rest of the line) specifies the command to be
run.
The entire command portion of the line, up to a newline or %
character, will be executed by /bin/sh or by the shell
specified in the SHELL variable of the cronfile.
Percent-signs (%) in the command, unless escaped with backslash
(\\), will be changed into newline characters, and all data
after the first % will be sent to the command as standard
input.
 
Note: The day of a command's execution can be specified by two fields day of
month, and day of week. If both fields are restricted (ie, aren't *), the 
command will be run when
.I either
field matches the current time. For example,
.IP
30 4 1,15 * 5
 
would cause a command to be run at 4:30 am on the 1st and 15th of each
month,
.I plus
every Friday.

.SH FILE INSTALLATION

A crontab file must be installed where 
.B crond
expects to find it.  All the crontabs go in a directory specified in the
configuration file (usually /etc/cron.conf).  If there is no configuration
file, the traditional default location is /var/spool/cron.

The filename must be equal to the username of the user to whom the crontab
belongs, as specified in /etc/passwd.  

As 
.B crond
has to run with superuser privilege, it doesn't matter to 
.B crond
what the permissions on a crontab are, but if you want to maintain crontab
files with 
.BR crontab ,
the permissions must be such that 
.B crontab 
can read and write them.  One way to do this is to make them all owned
by the superuser and install
.B crontab
as setuid superuser.  However, a safer method is to have a special cron uid
and have the crontabs owned by cron and
.B crontab
setuid cron.

You may also set up permissions so individual users can read and write
their own crontabs, but make sure they cannot update the crontab
directory (i.e. create new files).  And bear in mind that
.B crond
keeps the contents of the crontabs in storage and the only way it knows
to refresh them is when the modification time on the crontab directory
changes.  So 
.B crontab
is usually the best way to update crontabs.


.SH EXAMPLE CRONTAB FILE

.nf
#NODONTEDIT   - crontab leave my file alone.
# use /bin/sh to run commands, no matter what /etc/passwd says
SHELL=/bin/sh
# mail any output to `paul', no matter whose crontab this is
MAILTO=paul
# A cron command that runs Gcc might want this environment variable:
GCC_EXEC_PREFIX=/usr/local/lib/gcclib/
#
# run five minutes after midnight, every day; if cron is not running at 
# that time, catch up at startup; run several times if down for more 
# than one day
5 0 * * *       *$HOME/bin/daily.job >> $HOME/tmp/out 2>&1
#
# run at 2:15pm on the first of every month; catch up, but run only once
# even if the computer is down for several months
15 14 1 * *     !$HOME/bin/monthly
#
# run at 10 pm on weekdays, annoy Joe; don't do it, if cron is not
# up at that time.
0 22 * * 1-5	mail -s "It's 10pm" joe%Joe,%%Where are your kids?%

23 0-23/2 * * * echo "run 23 minutes after midn, 2am, 4am ..., everyday"
5 4 * * sun     echo "run at 5 after 4 every sunday"

#
# runs a command who's name starts with a "!"
@weekly		\\!sillycommand
.fi
.SH FILES
/etc/crontab			System crontab file

.SH SEE ALSO
.BR crond (8), 
.BR crontab (1)
.SH AUTHOR
.nf
Paul Vixie <paul@vix.com>
modifications by Felix Braun <fbraun@atdot.org>
modifications by Bryan Henderson <bryanh@giraffe-data.com>
